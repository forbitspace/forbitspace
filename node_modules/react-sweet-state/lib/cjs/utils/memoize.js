"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;

var _shallowEqual = _interopRequireDefault(require("./shallow-equal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// Mostly copied from https://github.com/alexreardon/memoize-one
// manually optimised shallow check 2 args
// Shallow comparing 2 arguments, so if arg objects instances are different
// but contents are the same we still get the memoized value
var argumentsEqual = function argumentsEqual(newArgs, lastArgs) {
  return (0, _shallowEqual["default"])(newArgs[0], lastArgs[0]) && (0, _shallowEqual["default"])(newArgs[1], lastArgs[1]);
};

function _default(resultFn) {
  var lastArgs = [];
  var lastResult;
  var calledOnce = false;

  var result = function result(argA, argB) {
    var newArgs = [argA, argB];

    if (calledOnce && argumentsEqual(newArgs, lastArgs)) {
      return lastResult;
    }

    lastResult = resultFn.apply(this, newArgs);
    calledOnce = true;
    lastArgs = newArgs;
    return lastResult;
  };

  return result;
}